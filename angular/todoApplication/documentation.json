{
    "pipes": [],
    "interfaces": [
        {
            "name": "TodoItem",
            "id": "interface-TodoItem-dacb6d56aed02762dc7a3f66ee96148c63adf4901d0c9be52fff25abf8bf5436df609947e8848c54b8810f6f8a1b6c92c3f59ac797d4ff52b8756d9f17682bb3",
            "file": "src/app/interfaces/todo-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TodoItem {\n  title: string;\n  completed?: boolean;\n}\n",
            "properties": [
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "StorageService",
            "id": "injectable-StorageService-4c0fff42c51ea1c91d3b826cb7f2ae253f8aa753eddc22aa16ee268d98328953a724a7af17d3362b8536396533468d3c4df1c032bbff4f11ba86d2e20df5602b",
            "file": "src/app/services/storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StorageService {\n  constructor() {}\n\n  getData(key: string): any {\n    return JSON.parse(localStorage.getItem(key) || '{}');\n  }\n\n  setData(key: string, data: any): void {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "TodoListService",
            "id": "injectable-TodoListService-eae8f4300988c4aca32b0ededbd33629aed604a363f23fd27e6f34a6d728c35f0a544d496330bd21a238845628cb65b511675a5aa880866945e3e7c23c6ed35c",
            "file": "src/app/services/todo-list.service.ts",
            "properties": [
                {
                    "name": "todoList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoItem[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTodoList",
                    "args": [],
                    "optional": false,
                    "returnType": "TodoItem[]",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "changes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "changes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TodoItem } from '../interfaces/todo-item';\r\nimport { StorageService } from './storage.service';\r\n\r\nconst todoListStorageKey = 'Todo_List';\r\n\r\nconst defaultTodoList: TodoItem[] = [\r\n  { title: 'install NodeJS' },\r\n  { title: 'install Angular CLI' },\r\n  { title: 'create new app' },\r\n  { title: 'serve app' },\r\n  { title: 'develop app' },\r\n  { title: 'deploy app' },\r\n];\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TodoListService {\r\n  todoList: TodoItem[];\r\n\r\n  constructor(private storageService: StorageService) {\r\n    this.todoList =\r\n      storageService.getData(todoListStorageKey) || defaultTodoList;\r\n  }\r\n\r\n  saveList(): void {\r\n    this.storageService.setData(todoListStorageKey, this.todoList);\r\n  }\r\n\r\n  getTodoList(): TodoItem[] {\r\n    return this.todoList;\r\n  }\r\n\r\n  addItem(item: TodoItem): void {\r\n    this.todoList.unshift(item);\r\n    this.saveList();\r\n  }\r\n\r\n  updateItem(item: TodoItem, changes: any): void {\r\n    const index = this.todoList.indexOf(item);\r\n    this.todoList[index] = { ...item, ...changes };\r\n    this.saveList();\r\n  }\r\n\r\n  deleteItem(item: TodoItem): void {\r\n    const index = this.todoList.indexOf(item);\r\n    this.todoList.splice(index, 1);\r\n    this.saveList();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f1a83a91d62a45f26653c71807a9b881561facb61ba544d6b6f18c271af9c14aeb7155b40abbac4b77dab02a551ef7775e7f70a6d2953e9fde5507663bfac8cb",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ToDo List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { TodoListComponent } from './components/todo-list/todo-list.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  standalone: true,\n  selector: 'app-root',\n  imports: [TodoListComponent, CommonModule],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'ToDo List';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  max-width: 1140px;\n  width: 100%;\n  margin: 0 auto;\n}\n\n.title {\n  color: #fff;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"content\" role=\"main\">\n  <h1 class=\"title\">{{ title }}</h1>\n  <app-todo-list></app-todo-list>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d0f8ce06451b53b4dc050c34946e4cb6910a7fb0b3aa0cae11fd0a38f4b214470a095942a80d466e52e760bd6fa242da73861c3e64d561c4053414c21f416375",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat text color to use\n",
                    "description": "<p>What text color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 717,
                            "end": 730,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 718,
                                "end": 726,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nType\n",
                    "description": "<p>Type</p>\n",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 57,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent implements OnInit {\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * What text color to use\n   */\n  @Input()\n  color?: string;\n\n  @Input()\n  disabled = false;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Type\n   */\n  @Input()\n  type?: string;\n\n  @Input()\n  borderRadius?: string;\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'button--primary' : 'button--secondary';\n\n    return ['button', `button--${this.size}`, mode];\n  }\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.button--primary {\n  color: white;\n  background-color: #28a745;\n}\n.button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 63
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 59
                    }
                }
            },
            "templateData": "<button\n\n  [type]=\"type\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{\n    'background-color': backgroundColor,\n    color: color,\n    'border-radius': borderRadius\n  }\"\n>\n  {{ label }}\n</button>\n"
        },
        {
            "name": "InputButtonComponent",
            "id": "component-InputButtonComponent-fe0d23ee5b2fa2e4f0cd05c101d6c50c52c47179a94628fcafeb2c92e2052c335f578fd1d7d61af01023cc4852436003b39ff439aa5fdbe8a071898c7cf17f52",
            "file": "src/app/components/input-button/input-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-button",
            "styleUrls": [
                "./input-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onSubmitForm",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "submit",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formC",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "newTaskText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormsModule, NgForm } from '@angular/forms';\nimport { ButtonComponent } from '../button/button.component';\n@Component({\n  selector: 'app-input-button',\n  standalone: true,\n  imports: [FormsModule, ButtonComponent],\n  templateUrl: './input-button.component.html',\n  styleUrls: ['./input-button.component.scss'],\n})\nexport class InputButtonComponent {\n  @Output() submit = new EventEmitter<string>();\n  @Output() onSubmitForm: EventEmitter<any> = new EventEmitter();\n  newTaskText = '';\n  formC!: FormGroup;\n  constructor() {}\n\n  // public onInput(value: string) {\n  //   this.newTaskText = value;\n  // }\n  // public submitValue(newTitle: string): void {\n  //   this.submit.emit(newTitle);\n\n  //   this.newTaskText = '';\n  // }\n\n  public onSubmit(form: NgForm) {\n    this.onSubmitForm.emit(form.form.value.taskTitle);\n    console.log(form.form);\n    this.formC = form.form;\n\n    form.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input {\n  width: 100%;\n  padding: 20px;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  margin-bottom: 10px;\n}\n\n.button-add {\n  display: flex;\n  justify-content: end;\n}\n",
                    "styleUrl": "./input-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<form (ngSubmit)=\"onSubmit(myForm)\" #myForm=\"ngForm\">\n  <input\n  type=\"text\"\n    ngModel\n    name=\"taskTitle\"\n    required\n    placeholder=\"Add new task\"\n    class=\"input\"\n  />\n\n  <app-button\n  [primary]=\"true\"\n    type=\"submit\"\n    class=\"button-add\"\n    label=\"Add\"\n    size=\"large\"\n    borderRadius=\"0.25rem\"\n  ></app-button>\n</form>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-481b348ed5794080e6777747bbec143142860301e26dc1f7bc66e633c31779e929a4b9057c04fcefd02f0374066b9d039efd45b4f20e6eceb52b5bf90539153f",
            "file": "src/app/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-input',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss']\n})\nexport class InputComponent implements OnInit {\n\n  @Input()\n  label = 'Label';\n\n  @Input()\n  type?: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>input works!</p>\n"
        },
        {
            "name": "TodoItemComponent",
            "id": "component-TodoItemComponent-7f506353e1fa063e542cd9b5d5118bdafbb5242c5016b5009e100b15f0d55499a1d17622bd957e78169be698ae4749aad9bc2575de9f58d967e1c9dc2eefce0b",
            "file": "src/app/components/todo-item/todo-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-item",
            "styleUrls": [
                "./todo-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "defaultValue": "{} as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "TodoItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<TodoItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<TodoItem>"
                },
                {
                    "name": "update",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "completeItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { TodoItem } from '../../interfaces/todo-item';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from '../button/button.component';\n@Component({\n  standalone: true,\n  selector: 'app-todo-item',\n  imports: [CommonModule, ButtonComponent],\n  templateUrl: './todo-item.component.html',\n  styleUrls: ['./todo-item.component.scss'],\n})\nexport class TodoItemComponent implements OnInit {\n  @Input() item: TodoItem = {} as any;\n  @Output() remove: EventEmitter<TodoItem> = new EventEmitter<TodoItem>();\n  @Output() update: EventEmitter<any> = new EventEmitter<any>();\n  constructor() {\n  }\n\n  ngOnInit(): void {}\n\n  public removeItem(): void {\n    this.remove.emit(this.item);\n  }\n\n  public completeItem(): void {\n    this.update.emit({\n      item: this.item,\n      changes: { completed: !this.item.completed },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".todo-item {\n  display: flex;\n  font-size: 18px;\n  justify-content: space-between;\n  padding: 1.25rem;\n  word-wrap: break-word;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  border-radius: 0.25rem;\n}\n\n.todo-checkbox {\n  flex-shrink: 0;\n  margin: auto 1ex auto 0;\n}\n\n.todo-complete {\n  text-decoration: line-through;\n}\n",
                    "styleUrl": "./todo-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"todo-item\">\n  <div>\n    <input\n      type=\"checkbox\"\n      class=\"todo-checkbox\"\n      (click)=\"completeItem()\"\n      [checked]=\"item.completed\"\n    />\n    <span class=\"todo-title\" [ngClass]=\"{ 'todo-complete': item.completed }\">\n      {{ item.title }}\n    </span>\n  </div>\n  <app-button\n    label=\"&#10006;\"\n    (onClick)=\"removeItem()\"\n    size=\"medium\"\n    backgroundColor=\"red\"\n    color=\"#fff\"\n    borderRadius=\"0.25rem\"\n  ></app-button>\n</div>\n"
        },
        {
            "name": "TodoListComponent",
            "id": "component-TodoListComponent-7e2fc1c2f1c0631656b340771f9b650bdb055345a2a4abdd67a1a550472f23c24b4462036933eb348e60fd939a76fd85fa59920a0dcf5ee1bfa51ca22c289599",
            "file": "src/app/components/todo-list/todo-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-list",
            "styleUrls": [
                "./todo-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessageText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "todoList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoItem[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasWhiteSpace",
                    "args": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "changes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "TodoItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "changes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, OnInit, Input } from '@angular/core';\nimport { TodoItem } from '../../interfaces/todo-item';\nimport { TodoListService } from '../../services/todo-list.service';\nimport { TodoItemComponent } from '../todo-item/todo-item.component';\nimport { InputButtonComponent } from '../input-button/input-button.component';\n\n@Component({\n  standalone: true,\n  selector: 'app-todo-list',\n  imports: [InputButtonComponent, TodoItemComponent, CommonModule],\n  templateUrl: './todo-list.component.html',\n  styleUrls: ['./todo-list.component.scss'],\n})\nexport class TodoListComponent implements OnInit {\n  todoList!: TodoItem[];\n  errorMessageText = '';\n\n  constructor(private todoListService: TodoListService) {}\n\n  ngOnInit(): void {\n    this.todoList = this.todoListService.getTodoList();\n  }\n\n  public hasWhiteSpace(s: string) {\n    return /^\\s/.test( s);\n  }\n\n  public addItem(title: string): void {\n    if (!title) {\n      this.errorMessageText = 'Task cannot be empty';\n      return;\n    } else if (this.hasWhiteSpace(title)) {\n      this.errorMessageText = 'This field cannot be left blank';\n      return;\n    }\n\n    this.errorMessageText = '';\n    this.todoListService.addItem({ title });\n  }\n\n  public removeItem(item: TodoItem): void {\n    this.todoListService.deleteItem(item);\n  }\n\n  public updateItem(item: TodoItem, changes: any): void {\n    this.todoListService.updateItem(item, changes);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list {\n  list-style: none;\n  padding: 0;\n}\n\n.error-msg {\n  color: #f23b3b;\n  font-size: 1.25rem;\n}\n",
                    "styleUrl": "./todo-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "todoListService",
                        "type": "TodoListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "todoListService",
                        "type": "TodoListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"todo-app\">\n  <app-input-button (onSubmitForm)=\"addItem($event)\"></app-input-button>\n  <p *ngIf=\"errorMessageText\" class=\"error-msg\">{{ errorMessageText }}</p>\n  <ul class=\"list\">\n    <li *ngFor=\"let todoItem of todoList\">\n      <app-todo-item\n        [item]=\"todoItem\"\n        (remove)=\"removeItem($event)\"\n        (update)=\"updateItem($event.item, $event.changes)\"\n      ></app-todo-item>\n    </li>\n  </ul>\n</div>\n\n"
        }
    ],
    "modules": [
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo-item/todo-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaultTodoList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/todo-list.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TodoItem[]",
                "defaultValue": "[\r\n  { title: 'install NodeJS' },\r\n  { title: 'install Angular CLI' },\r\n  { title: 'create new app' },\r\n  { title: 'serve app' },\r\n  { title: 'develop app' },\r\n  { title: 'deploy app' },\r\n]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputButtonComponent>",
                "defaultValue": "() => ({\n  component: InputButtonComponent,\n  template: `<app-input-button></app-input-button>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo-item/todo-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TodoItemComponent>",
                "defaultValue": "() => ({\n  component: TodoItemComponent,\n  template: `<app-input-button></app-input-button>`,\n})"
            },
            {
                "name": "todoListStorageKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/todo-list.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Todo_List'"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/button/button.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/components/input-button/input-button.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputButtonComponent>",
                    "defaultValue": "() => ({\n  component: InputButtonComponent,\n  template: `<app-input-button></app-input-button>`,\n})"
                }
            ],
            "src/app/components/todo-item/todo-item.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo-item/todo-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo-item/todo-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TodoItemComponent>",
                    "defaultValue": "() => ({\n  component: TodoItemComponent,\n  template: `<app-input-button></app-input-button>`,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/services/todo-list.service.ts": [
                {
                    "name": "defaultTodoList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/todo-list.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoItem[]",
                    "defaultValue": "[\r\n  { title: 'install NodeJS' },\r\n  { title: 'install Angular CLI' },\r\n  { title: 'create new app' },\r\n  { title: 'serve app' },\r\n  { title: 'develop app' },\r\n  { title: 'deploy app' },\r\n]"
                },
                {
                    "name": "todoListStorageKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/todo-list.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Todo_List'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input-button/input-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-item/todo-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-item/todo-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-item/todo-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-list/todo-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/todo-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodoItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/todo-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoListService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/todo-list.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTodoList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/todo-list.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todoListStorageKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}